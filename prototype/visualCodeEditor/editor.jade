doctype html
html
  head
    link(href="themes/gray.less", rel="stylesheet/less")
    meta(name="viewport", content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no")
    script(src="lib/less-1.7.0.min.js", type="text/javascript")
  body
    .editor(data-bind="template: { name: 'module-template', data: module }", unselectable="on", onselectstart="return false;")

  script#module-template(type="text/html")
    .module.expression
      .name(data-bind="text: name")
      .expressions
        // ko foreach: expressions
        //   ko template: { name: 'drop-horizontal-template', data: { type: 'expression', position: $index }}
        //  /ko
        //   ko template: { name: template }
        //  /ko
        ///ko
        // ko template: { name: 'drop-horizontal-template', data: { type: 'expression', position: expressions().length }}
        ///ko

  script#assignment-template(type="text/html")
    .assignment.expression(data-bind="with: assignment")
      .lvalue(data-bind="template: { name: lvalue().template, data: lvalue }")
      .op(data-bind="text: op")
      .rvalue(data-bind="template: { name: rvalue().template, data: rvalue }, style: { display: rvalue().template === 'function-template' ? 'block' : 'inline-block' }")

  script#var-template(type="text/html")
    .var.expression(data-bind="with: $data['var']")
      .keyword= 'var'
      .symbol.draggable(data-drop-target-types="['expression', 'function-name', 'defarg', 'callarg']")
        // ko template: { name: 'symbol-template', data: ref }
        ///ko
    // ko-template: { name: 'drop-vertical-template', data: { mode: 'after', type: 'assignable' }}
    ///ko

  script#ref-template(type="text/html")
    .assignable
      .ref.expression(data-bind="with: ref")
        .symbol.draggable(data-drop-target-types="['expression', 'function-name', 'defarg', 'callarg']")
          // ko template: { name: 'symbol-template' }
          ///ko
        // ko template: { name: 'drop-vertical-template', data: { mode: 'after', type: 'callable' }}
        ///ko
        // ko template: { name: 'expression-operator-template' }
        ///ko
      // ko template: { name: 'prop-template', data: ref }
      ///ko
    // ko ifnot: $data.ref.hasOwnProperty('call')
    //   ko template: { name: 'drop-vertical-template', data: { mode: 'after', type: 'assignable' }}
    //  /ko
    ///ko

  script#expression-operator-template(type="text/html")
    // ko if: $data['call']
    //   ko template: { name: 'call-template', data: $data['call'] }
    //  /ko
    ///ko
    // ko if: $data.sub
    //   ko template: { name: 'sub-template', data: $data.sub }
    //  /ko
    ///ko

  script#call-template(type="text/html")
    .call
      .args
        .expressions
          // ko foreach: args
          //   ko template: { name: template }
          //  /ko
          //   ko template: { name: 'drop-vertical-template', data: { mode: 'before', type: 'callarg', position: $index }}
          //  /ko
          ///ko
          // ko template: { name: 'drop-vertical-template', data: { mode: 'after', type: 'callarg', position: args().length }}
          ///ko
        // ko template: { name: 'drop-vertical-template', data: { mode: 'after', type: 'callable' }}
        ///ko
    // ko template: { name: 'expression-operator-template' }
    ///ko

  script#sub-template(type="text/html")
    .sub
      // ko template: { name: template }
      ///ko
      // ko template: { name: 'drop-vertical-template', data: { mode: 'after', type: 'callable' }}
      ///ko
    // ko template: { name: 'expression-operator-template' }
    ///ko

  script#prop-template(type="text/html")
    // ko if: $data.prop
    .prop.op= '.'
    //   ko template: { name: prop().template, data: prop }
    //  /ko
    ///ko

  script#literal-template(type="text/html")
    .literal.draggable.expression(data-bind="with: literal", data-drop-target-types="['expression','callarg']")
      // ko if: $data.editing
      input.editing(type="text", data-bind="value: value", autocorrect="off", autocapitalize="off")
      ///ko
      // ko if: value === ''
      div(data-bind="css: { class: type }")= '&nbsp;'
      .spacer
      ///ko
      // ko if: value !== ''
      div(data-bind="css: { class: type }, html: value")
      .spacer
      ///ko

  script#if-template(type="text/html")
    .if.expression(data-bind="with: $data['if']")
      .keyword= 'if'
      // ko template: { name: condition().template, data: condition }
      ///ko
      .then(data-bind="template: { name: $data['then']().template, data: $data['then'] }")
      // ko if: $data['else']
      div
        .keyword= 'else'
        .else(data-bind="template: { name: $data['else']().template, data: $data['else'] }")
      ///ko

  script#binary-template(type="text/html")
    .binary.expression(data-bind="with: binary")
      .left(data-bind="template: { name: left().template, data: left }")
      .op(data-bind="text: op")
      .right(data-bind="template: { name: right().template, data: right }")

  script#ternary-template(type="text/html")
    .ternary.expression(data-bind="with: ternary")
        // ko template: { name: $data['if']().template, data: $data['if'] }
        ///ko
        span.then.op= '?'
        // ko template: { name: $data['then']().template, data: $data['then'] }
        ///ko
        span.else.op= ':'
        // ko template: { name: $data['else']().template, data: $data['else'] }
        ///ko

  script#parens-template(type="text/html")
    .parens.expression(data-bind="with: parens")
      // ko template: { name: template }
      ///ko
      // ko template: { name: 'drop-vertical-template', data: { mode: 'after', type: 'callable' }}
      ///ko
    // ko template: { name: 'expression-operator-template', data: parens }
    ///ko
    // ko template: { name: 'prop-template', data: parens }
    ///ko

  script#hash-template(type="text/html")
    .hash.expression(data-bind="foreach: hash().entries")
      .entry
        .key
          // ko template: { name: 'literal-template', data: key }
          ///ko
        span.op= ':'
        // ko template: { name: value().template, data: value }
        ///ko

  script#function-template(type="text/html")
    .function.expression(data-bind="with: $data['function']")
      .keyword= 'function'
      // ko if: !ref().name()
      //   ko template: { name: 'drop-vertical-template', data: { mode: 'after', type: 'function-name' }}
      //  /ko
      ///ko
      .collapse.expanded
      // ko if: ref().name() || ref().editing()
      .symbol.draggable(data-drop-target-types="['expression', 'function-name', 'defarg', 'callarg']")
        // ko template: { name: 'symbol-template', data: ref }
        ///ko
      ///ko
      .args
        // ko foreach: args
        .symbol.draggable(data-drop-target-types="['expression', 'function-name', 'defarg', 'callarg']")
          // ko template: { name: 'symbol-template' }
          ///ko
        //   ko template: { name: 'drop-vertical-template', data: { mode: 'before', type: 'defarg', position: $index }}
        //  /ko
        ///ko
        // ko template: { name: 'drop-vertical-template', data: { mode: 'after', type: 'defarg', position: args().length }}
        ///ko
      .collapsible.expanded.expressions
        // ko foreach: expressions
        //   ko template: { name: 'drop-horizontal-template', data: { type: 'expression', position: $index }}
        //  /ko
        //   ko template: { name: template }
        //  /ko
        ///ko
        // ko template: { name: 'drop-horizontal-template', data: { type: 'expression', position: expressions().length }}
        ///ko

  script#return-template(type="text/html")
    .return.expression(data-bind="with: $data['return']")
      .keyword= 'return'
      // ko template: { name: template }
      ///ko

  script#new-template(type="text/html")
    .new.expression(data-bind="with: $data['new']")
      .keyword= 'new'
      .symbol.draggable(data-drop-target-types="['expression', 'function-name', 'defarg', 'callarg']")
        span(data-bind="text: name")
        .spacer
      // ko template: { name: 'drop-vertical-template', data: { mode: 'after', type: 'callable' }}
      ///ko
      // ko template: { name: 'expression-operator-template' }
      ///ko

  script#symbol-template(type="text/html")
    // ko if: $data.editing
    input.editing(type="text", data-bind="value: name", autocorrect="off", autocapitalize="off")
    ///ko
    span(data-bind="text: name")
    .spacer

  script#drop-horizontal-template(type="text/html")
    .droppable.horizontal(data-bind="attr: { 'data-drop-type': type, 'data-drop-position': $data.position }")

  script#drop-vertical-template(type="text/html")
    .droppable.vertical(data-bind="attr: { 'data-drop-type': type, 'data-drop-position': $data.position, 'data-drop-mode': $data.mode }")


  .palette(unselectable='on', onselectstart='return false;')  
    .mode(data-palette-behavior="mode")= 'copy'
    .action(data-palette-behavior="action")= 'ins'
    .draggable.new-keyword(data-palette-behavior="keyword", data-drop-target-types='["expression", "callarg", "if-postfix", "else-postfix", "switch-case", "try-catch", "try-finally", "binary-operator" ]')= 'key'
    .draggable.new-function(data-expression-type="function", data-drop-target-types='["expression", "callarg"]')= 'func'
    .draggable.new-symbol(data-expression-type="ref", data-drop-target-types='["expression", "function-name", "defarg", "callarg"]')= 'sym'
    .draggable.new-literal(data-palette-behavior="literal", data-expression-type="literal" data-drop-target-types='["expression", "callarg"]')= 'lit'
    .draggable.new-operator(data-palette-behavior="operator")= 'op'
    .draggable.new-call(data-expression-type="call", data-drop-target-types='["callable"]')= '( )'
    .delete= 'del'

  script#palette-menu(type="text/html")
    .palette-menu(data-bind="foreach: item")
      div(data-bind="text: text")

  script(src="lib/visibility.js")
  script(src="lib/jquery-2.1.0.min.js")
  script(src="lib/jquery-ui-1.10.4.custom.min.js")
  script(src="lib/jquery.ui.touch-punch.min.js")
  script(src="lib/jquery.ui.touch-closest-to-cursor-punch.js")
  script(src="lib/jquery.mobile-events.min.js")
  script(src="lib/lodash.min.js")
  script(src="lib/knockout-3.0.0.debug.js")
  script(src="js/editor.js")
  script(src="js/expressions.js")
  script(src="js/dragdrop.js")
  script(src="js/palette.js")
